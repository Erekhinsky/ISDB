CREATE OR REPLACE FUNCTION get_employee_access_lvl(employee_id integer) returns integer AS $$
	BEGIN
		RETURN (SELECT access_lvl FROM employee_position WHERE id = (select position_id from employee where employee.id = employee_id));
	END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION incident_case_lvl_chain() RETURNS trigger AS $$
	DECLARE
        new_case_access_lvl          integer;
    BEGIN
		new_case_access_lvl = (select incident.access_lvl from incident where incident.id = NEW.incident_id LIMIT 1);
		IF (select criminal_case.access_lvl from criminal_case where criminal_case.id = NEW.case_id LIMIT 1) 
			< new_case_access_lvl
		THEN
        	update criminal_case set access_lvl = new_case_access_lvl
where id = new.case_id;
    	END IF;
	RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER incident_case_lvl_chain_trig after INSERT ON case_related_incident
    FOR EACH ROW EXECUTE FUNCTION incident_case_lvl_chain();





CREATE OR REPLACE FUNCTION delete_responsible_employees_with_low_access_lvl() RETURNS trigger AS $$
	DECLARE
        new_case_access_lvl          integer;
    BEGIN
		IF (NEW.access_lvl > old.access_lvl)
		THEN
        	
			delete from responsible_employee 
			where 
			(case_id = NEW.id) 
			and 
			(get_employee_access_lvl(employee_id) < NEW.access_lvl);
    	END IF;
	RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_responsible_employees_with_low_access_lvl_trig after UPDATE of access_lvl ON criminal_case
    FOR EACH ROW EXECUTE FUNCTION delete_responsible_employees_with_low_access_lvl();








CREATE OR REPLACE FUNCTION get_abstract_by_department_id(selected_department_id integer) RETURNS integer AS $$
    BEGIN
		RETURN (SELECT employee.id FROM employee 
				WHERE 
					employee.department_id = selected_department_id
				and
					(select employee_position.position_name from employee_position 
					 where 
					 employee_position.id = employee.position_id) like '%абстракт%'
			   LIMIT 1
			   );
	END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_head_by_department_id(selected_department_id integer) RETURNS integer AS $$
    BEGIN
		RETURN (SELECT employee.id FROM employee 
				WHERE 
					employee.department_id = selected_department_id
				and
					(select employee_position.position_name from employee_position 
					 where 
					 employee_position.id = employee.position_id) like '%начальник%'
			and
				employee.current_status = 'актуальный'
			   LIMIT 1
			   );
	END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION article_case_department_responsibility_chain() RETURNS trigger AS $$
	DECLARE
        new_department_id          integer;
		head_or_abstract_id          integer;
    BEGIN
		
		new_department_id = (select article.department_id from article where article.id = new.article_id);
		
		IF 
		NOT EXISTS(
			select * from responsible_employee 
			where 
				(new.case_id = responsible_employee.case_id)
			and
				((select employee.department_id from employee 
				where employee.id = responsible_employee.employee_id) = new_department_id)
		) 
		THEN
        	
			head_or_abstract_id = get_head_by_department_id(new_department_id);
			
			if head_or_abstract_id IS NULL
			then
				head_or_abstract_id = get_abstract_by_department_id(new_department_id);
			END IF;
			
			insert into responsible_employee(employee_id, case_id)
			values
			(head_or_abstract_id, new.case_id);
			
    	END IF;
	RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER article_case_department_responsibility_chain_trig after INSERT ON court_charges
    FOR EACH ROW EXECUTE FUNCTION article_case_department_responsibility_chain();





















CREATE OR REPLACE FUNCTION responsible_employee_candidate_evaluation() RETURNS trigger AS $$
	DECLARE
        candidate_position_name          text;
	required_access_lvl      integer;
	candidate_access_lvl      integer;
	candidate_position_id      integer;
    BEGIN	
		candidate_position_id = (select employee.position_id from employee where employee.id = new.employee_id);
		
		candidate_position_name = (
			select position_name from employee_position 
			where 
			id = candidate_position_id 
		);
		
		
		IF 
		(candidate_position_name like '%начальник%') 
		OR
		(candidate_position_name like '%следователь%') 
		OR
		(candidate_position_name like '%спец. агент%') 
		OR
		(candidate_position_name like '%абстракт%') 
		THEN
        		candidate_access_lvl = (
				select access_lvl from employee_position 
				where 
				id = candidate_position_id 
			);
			required_access_lvl = (select access_lvl from criminal_case
				where 
				id = new.case_id
			);
			if (required_access_lvl <= candidate_access_lvl)
			then
				RETURN NEW;
			else
				raise exception 'Higher access lvl required!';
			end if;
				
    		END IF;
	
raise exception 'Inappropriate position to be responsinsible for a case!';
RETURN NULL;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER responsible_employee_candidate_evaluation_trig before INSERT ON responsible_employee
    FOR EACH ROW EXECUTE FUNCTION responsible_employee_candidate_evaluation();










CREATE OR REPLACE FUNCTION employee_access_lvl_downgrade() RETURNS trigger AS $$
	DECLARE
		new_access_lvl          integer;
		prev_access_lvl          integer;
        employee_prev_position_name          text;
		abstract_id          integer;
    BEGIN
		
			new_access_lvl = (
				select access_lvl from employee_position where id = new.position_id limit 1
			);

			prev_access_lvl = (
				select access_lvl from employee_position where id = old.position_id limit 1
			);

			if (new_access_lvl < prev_access_lvl)
			then

				employee_prev_position_name = (
					select position_name from employee_position 
					where 
					id = old.position_id
				);

				IF 
				(employee_prev_position_name like '%начальник%')  
				THEN
					abstract_id = get_abstract_by_department_id(old.department_id);
					update responsible_employee 
					set
						employee_id = abstract_id
					where 
						employee_id = new.id;

				else
					delete from responsible_employee 
					where 
						employee_id = new.id 
					and 
						(select criminal_case.access_lvl from criminal_case 
						 where 
						criminal_case.id = case_id) > new_access_lvl;
				END IF;

			END IF;
		
		
	RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER employee_access_lvl_downgrade_trig after UPDATE OF position_id ON employee
    FOR EACH ROW 
WHEN (OLD.position_id IS DISTINCT FROM NEW.position_id)
EXECUTE FUNCTION employee_access_lvl_downgrade();















CREATE OR REPLACE FUNCTION multiple_head_prevention() RETURNS trigger AS $$
	DECLARE
        new_employee_position_name          text;
		existing_head_id          integer;
		abstract_id          integer;
    BEGIN
		
		new_employee_position_name = (
			select position_name from employee_position 
			where 
			id = new.position_id
			LIMIT 1
		);

		IF 
		(new_employee_position_name like '%начальник%')
		THEN
			existing_head_id = get_head_by_department_id(new.department_id);
			IF existing_head_id IS NOT NULL
			THEN
				RAISE EXCEPTION 'Multiple department head exception';
				RETURN NULL;
			ELSE
				abstract_id = get_abstract_by_department_id(new.department_id);
				update responsible_employee 
				set
					employee_id = new.id
				where 
					employee_id = abstract_id;
			END IF;	
		END IF;
		
	RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER multiple_head_prevention_trig before insert ON employee
    FOR EACH ROW EXECUTE FUNCTION multiple_head_prevention();











CREATE OR REPLACE FUNCTION department_abstract_creation() RETURNS trigger AS $$
	DECLARE  
		abstract_position_id          integer;
    BEGIN
		abstract_position_id = (select id from employee_position where position_name like '%абстракт%');
		insert into employee (position_id, department_id, employee_name, passport, current_status)
		values
		(abstract_position_id, new.id, new.abbrev, new.abbrev, 'актуальный');
		
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER department_abstract_creation_trig after insert ON department
    FOR EACH ROW EXECUTE FUNCTION department_abstract_creation();











CREATE OR REPLACE FUNCTION position_update_delete_restriction() RETURNS trigger AS $$
    BEGIN	
		RAISE EXCEPTION 'Position data cannot be updated or deleted';
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER position_update_restriction_trig before update ON employee_position
    FOR EACH ROW EXECUTE FUNCTION position_update_delete_restriction();
CREATE TRIGGER position_delete_restriction_trig before delete ON employee_position
    FOR EACH ROW EXECUTE FUNCTION position_update_delete_restriction();








CREATE OR REPLACE FUNCTION abstract_update_delete_restriction() RETURNS trigger AS $$
BEGIN	

		IF 
		(old.position_id = 1)
		THEN
		RAISE EXCEPTION 'Abstract of a department cannot be deleted or updated';
		END IF;
	return new;	
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER abstract_delete_restriction_trig before delete ON employee
    FOR EACH ROW EXECUTE FUNCTION abstract_update_delete_restriction();

CREATE TRIGGER abstract_update_restriction_trig before update ON employee
    FOR EACH ROW EXECUTE FUNCTION abstract_update_delete_restriction();






CREATE OR REPLACE FUNCTION department_update_delete_restriction() RETURNS trigger AS $$
    BEGIN	
		RAISE EXCEPTION 'Department data cannot be updated or deleted';
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER department_update_restriction_trig before update ON department
    FOR EACH ROW EXECUTE FUNCTION department_update_delete_restriction();
CREATE TRIGGER department_delete_restriction_trig before delete ON department
    FOR EACH ROW EXECUTE FUNCTION department_update_delete_restriction();






CREATE OR REPLACE FUNCTION article_update_delete_restriction() RETURNS trigger AS $$
    BEGIN	
		RAISE EXCEPTION 'Article data cannot be updated or deleted';
		RETURN NULL;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER article_update_restriction_trig before update ON article
    FOR EACH ROW EXECUTE FUNCTION article_update_delete_restriction();
CREATE TRIGGER article_delete_restriction_trig before delete ON article
    FOR EACH ROW EXECUTE FUNCTION article_update_delete_restriction();






